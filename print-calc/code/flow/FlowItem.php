<?php

namespace PC;

/** 
 * This class has been auto-generated by the SS importer module
 * 
 * @property string Title
 * @property int ProductID
 * @property int ProductRequestID
 * @property int FlowID
 * @method Product Product()
 * @method ProductRequest ProductRequest()
 * @method Flow Flow()
 * @method \ManyManyList|FlowOperationItem[] FlowOperationItems()
 */

class FlowItem extends \DataObject {
    
    private static $singular_name = "Flow Item";
    
    private static $plural_name = "Flow Items";
    
    private static $has_one = array(
        'Product' => 'PC\Product',
        'Flow' => 'PC\Flow',
        'ProductRequest' => 'PC\ProductRequest',
    );

    private static $many_many = array(
    );

    private static $belongs_many_many = array(
    );

    private static $db = array(
        'Title' => 'Varchar(128)',
    );

    private static $has_many = array(
        'FlowOperationItems' => 'PC\FlowOperationItem',
    );

    private static $summary_fields = array(
        'ID', 'Title', 'Created', 'Flow.Name', 'ProductRequest.Summary'
    );

    private static $searchable_fields = array(
        'ID','Created','Title',
    );

    private static $default_sort = 'Created DESC';

    protected function onBeforeWrite() {
        if (!$this->ProductID && $this->ProductRequestID) {
            $this->ProductID = $this->ProductRequest()->ProductID;
        }
        if (!$this->Title && $this->ProductID) {
            $this->Title = $this->Product()->Title;
        }
        parent::onBeforeWrite();
    }

    protected function onAfterDelete() {
        parent::onAfterDelete();
        foreach ($this->FlowOperationItems() as $item) {
            $item->delete();
        }
    }


    public function calculatePrice() {
        $price = 0;
//        if (!$this->FlowID) $this->FlowID = $this->Product()->FlowID;
        foreach ($this->Flow()->FlowOperations() as $operation) {
            $operationItem = $this->FlowOperationItems()->filter(
                'FlowOperationID', $operation->ID
            )->first();
            if (!$operationItem || !$operationItem->exists()) {
                $operationItem = new FlowOperationItem();
                $operationItem->FlowItemID = $this->ID;
                $operationItem->FlowOperationID = $operation->ID;
                $operationItem->write();
            }
            $price += $operationItem->calculatePrice();
        }
        return $price;
    }
    
        

}
