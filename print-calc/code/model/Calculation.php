<?php

namespace PC;

/**
 * This class has been auto-generated by the SS importer module
 *
 * @property integer CalculationRequestID
 * @property integer OrderDeadlineID
 * @method CalculationRequest CalculationRequest()
 * @method \HasManyList|ClientOrder[] ClientOrders()
 * @method \HasManyList|CalculationItem[] CalculationItems()
 * @method OrderDeadline OrderDeadline()
 */

class Calculation extends \DataObject {

    private static $singular_name = "Calculation";

    private static $plural_name = "Calculations";

    private static $db = array(
    );

    private static $has_many = array(
        'ClientOrders' => 'PC\ClientOrder',
        'CalculationItems' => 'PC\CalculationItem',
    );

    private static $has_one = array(
        'CalculationRequest' => 'PC\CalculationRequest',
        'OrderDeadline' => 'PC\OrderDeadline',
    );

    public function OffsetCalculationItems() {
        return $this->CalculationItems()->filter("PrintingType","offset");
    }

    public function DigitalCalculationItems() {
        return $this->CalculationItems()->filter("PrintingType","digital");
    }


    /* ----- Class content ----- */


    const FOLD_HEIGHT = 2;
    const COVER_SLACK = 4;


    private function getMaterialCost(PaperStockSheet $paper, $pagesPerA1sheet, $pageNumber) {
        $res = new CalculationResult();

        $printSheetNumber = $res->log(
            $pageNumber / $pagesPerA1sheet
            , 'Кол-во листов A1 :');

        $paperSheets = $res->log(
            $printSheetNumber / $paper->A1SheetsPerItem
            , 'Кол-во бумажных листов :');

        $paperSheets = $res->log(
            ceil($paperSheets)
            , 'Кол-во бумажных листов (окр.):');

        $res->calcAndLog(
            $paperSheets * $paper->Cost
            , 'Цена материала :');

        return $res;
    }

    public function calculate() {
        $cr = $this->CalculationRequest();

        $circs = array_filter(array(1, $cr->BookNumber1, $cr->BookNumber2, $cr->BookNumber3));

        foreach ($circs as $circulation) {
            foreach (array(false, true) as $isOffset) {
                if ($circulation > 0) {
                    $result = $this->getPrice($circulation, $isOffset);
                    $item = $this->getItemFromResult($result);
                    $item->setPrintingByType($isOffset?CalculationItem::OFFSET:CalculationItem::DIGITAL);
                    $item->Circulation = $circulation;
                    $item->CalculationID = $this->ID;
                    $item->write();
                }
            }
        }
    }

    private function getItemFromResult(CalculationResult $result) {
        $item = new CalculationItem();
        $item->Price = $result->getValue();
        $item->Details = $result->getComments();
        return $item;
    }

    private $calculationResult = null;

    private function getPrice($circulation, $machine) {
        //return value
        $ret = new CalculationResult();
        //calculate number of sheets
        $cr = $this->CalculationRequest();



    }

    /**
     * getPrice
     * Calculates price for complete print cycle of book
     * @param $bookNumber number or books to print
     * @param $isOffset print using digital or offset machines
     */

    private function getPrice1($bookNumber, $isOffset) {

        //return value
        $ret = new CalculationResult();

        //calculate number of sheets
        $cr = $this->CalculationRequest();

        $pageNumber = $ret->log($cr->ColorPageNumber + $cr->BwPageNumber,
            _t('PC\Calculation.PriceTrace1',"Общее кол-во страниц: "));

        $ret->log(
            $cr->BookFormat()->PagesPerA1Sheet
            , _t(
                'PC\Calculation.PriceTrace2',
                "Справочник -> Кол-во страниц выбранного формата на листе A1 (с двух сторон): "
        ));

        $ret->merge(
            $this->getMaterialCost(
                $cr->BookPaperStockSheet(),
                $cr->BookFormat()->PagesPerA1Sheet,
                $pageNumber * $bookNumber)
        );

        //calculate cover height
        $coverHeight = $ret->log(
            ceil($pageNumber / 2) * $cr->BookPaperStockSheet()->Height
            , _t('PC\Calculation.PriceTrace3',"Толщина корешка : "));

        $coverHeight = $ret->log(
            $coverHeight + self::FOLD_HEIGHT
            , _t('PC\Calculation.PriceTrace4',"Толщина корешка c учетом сгибов : "));


        //calculate print cost
        //select print types
        //TODO: add filter for paper weight and color type
        $ret->log('', _t('PC\Calculation.PriceTrace5',"Выбор печатной машины:"));

        $isColor = $ret->log(
            $cr->BookColorType()->HasColorPages
            , _t('PC\Calculation.PriceTrace6','Цветная книга ? :'));

        $printMachines = Machine::getPrintMachinesByQualityAndWeight(
            $cr->PrintQuality(),
            $cr->BookPaperStockSheet()->PaperWeight(),
            $isOffset, //digital machines or not
            $isColor
        );

        $printPrice = array();

        /** @var Machine $pm */
        foreach ($printMachines as $pm) {
            $ret->log('', "==============================================");
            $ret->log('', _t('PC\Calculation.PriceTrace7',"Машина-> ") . strval($pm->ID) . "-" . $pm->Name);


            $formNumber = $ret->log(
                ceil(
                    $pageNumber / $cr->BookFormat()->PagesPerA1Sheet
                    * $pm->PrintSheetsPerA1Sheet
                    * 2 //double side print
                )
                , _t('PC\Calculation.PriceTrace8',"Количество уникальных форм на тираж: "));

            $clickNumber = $ret->log(
                $formNumber * $bookNumber
                , _t('PC\Calculation.PriceTrace9',"Количество кликов на тираж: "));


            $res = $pm->getTotalPrintingCost(
                $cr->BookPaperStockSheet(),
                $this->OrderDeadline(),
                $formNumber,
                $clickNumber,
                array(
                    'bookNumber' => $bookNumber,
                    'clickNumber' => $clickNumber,
                    'formNumber' => $formNumber,
                    'pagesPerA1Sheet' => $cr->BookFormat()->PagesPerA1Sheet,
                    'coverHeight' => $coverHeight,
                    'blockHeight' => $coverHeight - self::FOLD_HEIGHT,
                    '1' => '1'
                ));

            $machineCost = $ret->log(
                ceil($res->getValue())
                , $res->getComments() . _t('PC\Calculation.PriceTrace10',"Общая цена на машину : "));

            $printPrice[$pm->ID] = $machineCost;

        }
        //select machine
        $selectedMachine = $this->selectMachine($printPrice);

        if ($selectedMachine->getValue() > 0) {
            $ret->calcAndLog(
                $printPrice[$selectedMachine->getValue()]
                , $selectedMachine->getComments() . _t('PC\Calculation.PriceTrace11',"Цена выбранной машины - "));
        }


        //calculate cover price
        $ret->log('', "==============================================");
        $ret->log('', _t('PC\Calculation.PriceTrace12',"ОБЛОЖКА"));
        $ret->log('', "==============================================");


        $fullCoverWidth = $ret->log(
            $coverHeight + 2 *
            (self::COVER_SLACK + $cr->BookFormat()->Width)
            , _t('PC\Calculation.PriceTrace13',"Полная ширина обложки : "));


        $fullCoverHeight = $ret->log(
            2 * self::COVER_SLACK + $cr->BookFormat()->Height
            , _t('PC\Calculation.PriceTrace14',"Полная высота обложки : "));

        $formNumber = $ret->log(
            $cr->CoverType()->IsSingleSide ? 1 : 2
            , _t('PC\Calculation.PriceTrace15',"Кол-во сторон у обложки :"));

        $isCoverColor = $cr->CoverType()->IsColor;

        // for each machine
        $printMachines = Machine::getPrintMachinesByWeight(
            $cr->CoverPaperStockSheet()->PaperWeight(),
            $isCoverColor
        );

        $ret->log('', _t('PC\Calculation.PriceTrace16',"Выбор машины для обложки : "));

        $printPrice = array();

        /** @var Machine $pm */
        foreach ($printMachines as $pm) {
            $ret->log('', "==============================================");
            $ret->log('', _t('PC\Calculation.PriceTrace17',"Машина-> ") . strval($pm->ID) . "-" . $pm->Name);

            //calculate number of covers per click
            $coversPerClick = 0;
            //ширина машины больше полной ширины обложки
            if ($pm->MaxX >= $fullCoverWidth) {
                if ($pm->MaxY >= $fullCoverHeight * 2)
                    $coversPerClick = 2;
                else
                    $coversPerClick = 1;
            } //если ширина обложки больше максимального размера машины - то 0
            else {
                if ($pm->MaxY >= $fullCoverHeight) {
                    $coversPerClick = 1;
                } else {
                    $coversPerClick = 0;
                }
            }

            $ret->log($coversPerClick, _t('PC\Calculation.PriceTrace18',"Кол-во обложек за один клик машины : "));

            //skip this machine
            if ($coversPerClick == 0) {
                $ret->log('', _t('PC\Calculation.PriceTrace19',"Machine is skipped."));
                continue;
            }

            //material cost
            $materialCost = $this->getMaterialCost(
                $cr->CoverPaperStockSheet(),
                $coversPerClick * $pm->PrintSheetsPerA1Sheet,
                $coversPerClick * $formNumber * $bookNumber);

            $ret->log('',
                $materialCost->getComments()
            );

            //calculate number of clicks
            //including double side
            $clickNumber = $ret->log(
                ceil($formNumber * $bookNumber / $coversPerClick)
                , _t('PC\Calculation.PriceTrace20',"Кол-во кликов на обложки : "));

            //calculate print cost
            $printCost = $pm->getTotalPrintingCost(
                $cr->CoverPaperStockSheet(),
                $this->OrderDeadline(),
                $formNumber,
                $clickNumber,
                array(
                    'bookNumber' => $bookNumber,
                    'clickNumber' => $clickNumber,
                    'formNumber' => $formNumber,
                    'pagesPerA1Sheet' => $coversPerClick,
                    'coverHeight' => $coverHeight,
                    'blockHeight' => $coverHeight - self::FOLD_HEIGHT,
                    '1' => '1'
                ));

            $machineCost = $ret->log(
                ceil($printCost->getValue() + $materialCost->getValue())
                , $printCost->getComments() . _t('PC\Calculation.PriceTrace21',"Общая стоимость печати обложки :"));

            $printPrice[$pm->ID] = $machineCost;

        }
        //select machine
        $selectedMachine = $this->selectMachine($printPrice);

        if ($selectedMachine->getValue() > 0) {
            $ret->calcAndLog(
                $printPrice[$selectedMachine->getValue()]
                , $selectedMachine->getComments() . _t('PC\Calculation.PriceTrace22',"Цена выбранной машины - "));
        }

        $ret->log('', "==============================================");

        //calculate additional operations
        $ret->log('', _t('PC\Calculation.PriceTrace23',"Дополнительные операции"));
        $ret->log('', "==============================================");

        $ret->log('', _t('PC\Calculation.PriceTrace24',"Процесс для вариантов переплетов:"));

        $bindingFlow = $cr->BindingOption()->Flow()->calculateFlowCost(
            $cr->BookPaperStockSheet(),
            $this->OrderDeadline(),
            $bookNumber,
            $pageNumber,
            $cr->BookFormat()->PagesPerA1Sheet,
            array(
                'bookNumber' => $bookNumber,
                'pagesPerA1Sheet' => $cr->BookFormat()->PagesPerA1Sheet,
                'coverHeight' => $coverHeight,
                'blockHeight' => $coverHeight - self::FOLD_HEIGHT,
                '1' => '1'

            ));

        $ret->calcAndLog(
            $bindingFlow->getValue(),
            $bindingFlow->getComments() . _t('PC\Calculation.PriceTrace25','Общая стоимость процесса : ')

        );

        $ret->log('', "==============================================");

        $ret->log('', _t('PC\Calculation.PriceTrace26',"Процесс для отделки:"));

        $decorationFlow = $cr->CoverDecoration()->Flow()->calculateFlowCost(
            $cr->CoverPaperStockSheet(),
            $this->OrderDeadline(),
            $bookNumber,
            $pageNumber,
            $cr->BookFormat()->PagesPerA1Sheet,
            array(
                'bookNumber' => $bookNumber,
                'pagesPerA1Sheet' => $cr->BookFormat()->PagesPerA1Sheet,
                'coverHeight' => $coverHeight,
                'blockHeight' => $coverHeight - self::FOLD_HEIGHT,
                '1' => '1'

            ));

        $ret->calcAndLog(
            $decorationFlow->getValue(),
            $decorationFlow->getComments() . _t('PC\Calculation.PriceTrace27','Общая стоимость процесса : ')

        );


        $ret->log('', "==============================================");

        //calculate additional services
        $ret->log('', _t('PC\Calculation.PriceTrace28',"Дополнительные услуги"));
        $ret->log('', "==============================================");

        $serviceCost = 0;

        /** @var AdditionalService $service */
        foreach ($cr->AdditionalServices() as $service) {
            $serviceCost += $service->Price;
        }

        $ret->calcAndLog($serviceCost, _t('PC\Calculation.PriceTrace29',"Стоимость дополнительных услуг: "));


        $ret->log('', "==============================================");

        //calculate additional operations
        $ret->log('', _t('PC\Calculation.PriceTrace30',"Доставка"));
        $ret->log('', "==============================================");

        $ret->calcAndLog(
            $cr->DeliveryType()->Price,
            _t('PC\Calculation.PriceTrace31','Стоимость доставки :')
        );

        return $ret;

    }

    /*
     * Select machine with minimal price from the list greater than zero
     * add machine price to results
    */

    private function selectMachine($printPrice) {

        $ret = new CalculationResult();
        //sort by cost
        asort($printPrice);

        //select machine with minimal cost
        $selectedMachineId = 0;
        foreach ($printPrice as $key => $value) {
            if ($value > 0) {
                $selectedMachineId = $key;
                break;
            }
        }
        $ret->log('', "==============================================");
        if ($selectedMachineId == 0) {
            //exception!!
            $ret->log('', _t('PC\Calculation.PriceTrace32',"Что-то неверно, не могу выбрать машину!"));
        } else {
            $ret->calcAndLog($selectedMachineId, _t('PC\Calculation.PriceTrace33',"Выбранная машина ->"));
        };

        return $ret;
    }


}
